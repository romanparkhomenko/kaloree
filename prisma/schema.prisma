generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
  author    User?   @relation(fields: [authorId], references: [id])

  @@index([authorId], name: "authorId")
}

model Meal {
  id           Int      @id @default(autoincrement())
  food         String
  foodCategory String
  grams        Float?
  ounces       Float?
  calories     Int?
  userId       Int?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  date         String?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Workout {
  id           Int      @id @default(autoincrement())
  workout      String
  minutes      Int?
  caloriesBurnt     Int?
  weight       Int?
  userId       Int?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  date         String?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Friends {
  id           Int      @id @default(autoincrement())
  userId       Int?
  friendId     Int?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Comments {
  id        Int     @id @default(autoincrement())
  content   String?
  authorId  Int?
  profileId Int?
  author    User?   @relation(fields: [authorId], references: [id])

  @@index([authorId], name: "authorId")
}

model Weight {
  id        Int      @id @default(autoincrement())
  pounds    Int
  date      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  caloriegoal   Int?
  weightgoal    Int?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  Meal          Meal[]
  posts         Post[]
  Weight        Weight[]
  Friends       Friends[]
  Comments      Comments[]
  Workout       Workout[]

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}
